---
import { CollectionEntry, getCollection } from "astro:content";
import Posts from "@layouts/Posts.astro";
import PostDetails from "@layouts/PostDetails.astro";
import getSortedPosts from "@utils/getSortedPosts";
import getPageNumbers from "@utils/getPageNumbers";
import slugify from "@utils/slugify";
import { SITE } from "@config";
import type { BlogFrontmatter } from "@content/_schemas";

export interface Props {
  post: CollectionEntry<"blog">;
  frontmatter: BlogFrontmatter;
}

export async function getStaticPaths() {
  const mapFrontmatter = new Map();

  // Get all posts using glob. This is to get the updated frontmatter
  const globPosts = await Astro.glob<BlogFrontmatter>(
    "../../content/blog/*.md"
  );

  // Then, set those frontmatter value in a JS Map with key value pair
  // (post-slug, frontmatter)
  globPosts.map(({ frontmatter }) => {
    mapFrontmatter.set(slugify(frontmatter), frontmatter);
  });

  const posts = await getCollection("blog", ({ data }) => !data.draft);

  const postResult = posts.map(post => ({
    params: { slug: slugify(post.data) },
    props: { post, frontmatter: mapFrontmatter.get(slugify(post.data)) },
  }));

  const pagePaths = getPageNumbers(posts.length).map(pageNum => ({
    params: { slug: String(pageNum) },
  }));

  return [...postResult, ...pagePaths];
}

const { slug } = Astro.params;
const { post, frontmatter } = Astro.props;

const posts = await getCollection("blog");

const sortedPosts = getSortedPosts(posts);

const totalPages = getPageNumbers(sortedPosts.length);

const currentPage =
  slug && !isNaN(Number(slug)) && totalPages.includes(Number(slug))
    ? Number(slug)
    : 0;
const lastPost = currentPage * SITE.postPerPage;
const startPost = lastPost - SITE.postPerPage;

const paginatedPosts = sortedPosts.slice(startPost, lastPost);
---

{
  post ? (
    <PostDetails post={post} frontmatter={frontmatter} />
  ) : (
    <Posts
      posts={paginatedPosts}
      pageNum={currentPage}
      totalPages={totalPages.length}
    />
  )
}
